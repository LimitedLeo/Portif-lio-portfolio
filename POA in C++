#include <iostream>
#include <string>

class Conta {
protected:
    std::string numeroConta;
    double saldo;

public:
    Conta(std::string numeroConta, double saldoInicial)
        : numeroConta(numeroConta), saldo(saldoInicial) {}

    virtual bool sacar(double valor) = 0; // Método abstrato

    double getSaldo() const { return saldo; }
    std::string getNumeroConta() const { return numeroConta; }

    virtual ~Conta() {}
};

class ContaProxy {
private:
    Conta* conta;

public:
    ContaProxy(Conta* conta) : conta(conta) {}

    bool sacar(double valor) {
        std::cout << "[LOG] Tentando sacar " << valor << " da conta " << conta->getNumeroConta() << "\n";
        
        if (!conta->sacar(valor)) {
            std::cout << "[ERRO] Saldo insuficiente na conta " << conta->getNumeroConta() << "\n";
            return false;
        }

        if (dynamic_cast<ContaInvestimento*>(conta)) { // Verifica se é ContaInvestimento
            std::cout << "[INFO] Taxa cobrada no saque da Conta Investimento\n";
        }

        return true;
    }

    ~ContaProxy() { delete conta; }
};


class ContaInvestimento : public Conta {
private:
    double taxaSaque; // Exemplo: 2% de taxa por saque

public:
    ContaInvestimento(std::string numeroConta, double saldoInicial, double taxa)
        : Conta(numeroConta, saldoInicial), taxaSaque(taxa) {}

    bool sacar(double valor) override {
        double valorTotal = valor + (valor * taxaSaque); // Aplica a taxa
        if (saldo >= valorTotal) {
            saldo -= valorTotal;
            std::cout << "Saque de " << valor << " realizado com sucesso na Conta Investimento.\n";
            std::cout << "Taxa de saque aplicada: " << (valor * taxaSaque) << "\n";
            return true;
        }
        return false;
    }
};
int main() {
    ContaProxy conta1(new ContaCorrente("123", 500));
    ContaProxy conta2(new ContaPoupanca("456", 300));
    ContaProxy conta3(new ContaInvestimento("789", 1000, 0.02)); // 2% de taxa

    conta1.sacar(600);  // Saldo insuficiente
    conta2.sacar(100);  // Saque bem-sucedido
    conta2.sacar(500);  // Saldo insuficiente
    conta3.sacar(200);  // Saque bem-sucedido + taxa aplicada (204 será descontado)
    conta3.sacar(900);  // Saldo insuficiente

    return 0;
}
